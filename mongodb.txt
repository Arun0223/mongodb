Mongo db:
	Mongo db is a no sql database which means no relational database in which the data stores in json(java script notation)and BSON(binary search opertion)
	format. which is used for high complexity data. it is used to store the unstractured data.
	mongo db has following constraints:
		1)Database ==> same as database in sql
		2)collection => table insql
		3)document ==> records i.e. rows in a table
		4)fields
	Datatypes in mongo db:
		1)str
		2)integer
		3)bool
		4)array
		5)double
		6)timestamp
		db.<collection-name>.insert({"<field-name>":new Timestamp()})
		Example:
			> db.date.insert({"time":new Timestamp(09,11)})
			  WriteResult({ "nInserted" : 1 }
		7)bool
		8)min / max keys
		9)regular expression
		10)Date
		syntax for date datatype:
			db.<collection-name>.insert({"<field-name>":Date()}) ==> it will give current date as string
			db.<collection-name>.insert({"<field-name>":new Date()}) ==> it will give current date as date format
			db.<collection-name>.insert({"<field-name>":new Date("1999-05-10T11:05:10Z")}) ==> it will take date in UTC and give in ITC
			db.<collection-name>.insert({"<field-name>":new ISODate("1999-05-10T11:05:10Z")}) ==> it will take date in ITC format and given in ISO
Creating a database:
	==> in mongo db you no need to create database just you need to use this command 
			use <database-name>
			the above command automatically create the database and switched to that database
			this database won't appear until you create a collection in it
Create a collection:
	command:
	syntax:
		db.createCollection(<collection-name>)
		********************** show collections***************** ==> to see the collections in database
	Example:
		> db.createCollection("my_col");
		  { "ok" : 1 }
		> show collections;
		  my_col
		  mycol
	while createing the collection we have following fields
	autoindex ==> by default it's true i.e. it will index number to documents automatically
	capped ==> by default it's false but when you mentioned it as true it will overwrited the document once size exceed
	size ==> when you mentioned capped as true you need to give the size which means once the size exceeds it will automatically overwrited
	max ==> maximum number od documents which will insert in capped collection
	Example:
		> db.createCollection("mycol2",{capped:true,size:2,max:5});
		  { "ok" : 1 }
Deleting the collection:
	Stntax:
		db.<collection-name>.drop()
	Example:
		> db.mycol2.drop()
		  true
Deleting database:
	before deleting the database first you need to switch in to the database
	Stntax:
		db.dropdatabase()
	Example:
		
		> use datatypes;
		switched to db datatypes
		> db.dropDatabase();
		{ "ok" : 1 }
		> show databases;
		admin     0.000GB
		config    0.000GB
		local     0.000GB
		students  0.000GB
		test      0.000GB
Inserting document in collection:
	syntax:
		db.<collection-name>.insert({<fields>:<values>})
	Example:
		db.datatypes.insert({"name":"arun kumar",age:23,marks:94.99,"address":{"h-no":"2-73","village":"seethampeta","mdl":"ellandhakunat","district":"karimanagar","pin":505475},"dob":new ISODate("1999-05-10T11:05:20Z"),"married":false,"current_time":new Timestamp(9,18)});
	here we can insert only one collection at one time or multiple collections at one time
	The above example was inserting single collection at one time
	mutltiple collections:
	syntax:
		var <var-name>=[{<fileds:values>},{<fields>:<values>...............n}]
		db.<collection-name>.insertmany(<var-name>)
	Example:
		> var students=[{"name":"sai teja","age":24,"marks":89},{"name":"harish s",age:24,"marks":98.99}];
		> db.students_details.insertMany(students)
		{
				"acknowledged" : true,
				"insertedIds" : [
						ObjectId("62ce41d755662010806af62d"),
						ObjectId("62ce41d755662010806af62e")
				]
		}
Querying mongodb documents:
	To display all in collection table:
		Stntax:
			db.<collection-name>.find() ==> to find all documents in collection
		Example:
			> db.students_details.find()
				{ "_id" : ObjectId("62ce418555662010806af62c"), "name" : "arun", "age" : 23, "marks" : 99.94 }
				{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 24, "marks" : 89 }
				{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 24, "marks" : 98.99 }
	Querying based on one field:
		Stntax:
			db.<collection-name>.find({<field-name>:<value>})
		Example:
			> db.students_details.find({"age":24})
			{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 24, "marks" : 89 }
			{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 24, "marks" : 98.99
	Querying based on one field but getting only one document:
		Stntax:
			db.<collection-name>.findone({<field-name>:<value>})
		Example:
			> db.students_details.findOne({"age":24})
				{
						"_id" : ObjectId("62ce41d755662010806af62d"),
						"name" : "sai teja",
						"age" : 24,
						"marks" : 89
				}
Pretty():
	Syntax:
		db.<collection-name>.find().pretty()    ===> it will give the data in very pretty formated way
	Example:
		> db.students_details.find({"age":24}).pretty()
			{
					"_id" : ObjectId("62ce41d755662010806af62d"),
					"name" : "sai teja",
					"age" : 24,
					"marks" : 89
			}
			{
					"_id" : ObjectId("62ce41d755662010806af62e"),
					"name" : "harish s",
					"age" : 24,
					"marks" : 98.99
			}
Where conditions in Querying mongodb documents:
	==> here we won't use where clause simply we will write conditions
	1)Equal:
		Stntax:
			db.<collection-name>.find({<key>:{$eq:<value>}})
		Example:
			> db.students_details.find({"age":{$eq:24}});
				{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 24, "marks" : 89 }
				{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 24, "marks" : 98.99 }
	
	2) lessthan
		Stntax:
			db.<collection-name>.find({<key>:{$lt:<value>}}
		Example:
			> db.students_details.find({"age":{$lt:25}});
			{ "_id" : ObjectId("62ce418555662010806af62c"), "name" : "arun", "age" : 23, "marks" : 99.94 }
			{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 24, "marks" : 89 }
			{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 24, "marks" : 98.99 }
	
	3) Greaterthan
		Stntax:
			db.<collection-name>.find({<key>:{$gt:<value>}})
		Example:
			> db.students_details.find({"age":{$gt:23}});
			{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 24, "marks" : 89 }
			{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 24, "marks" : 98.99 }
	4)Lessthan or equal:
		Stntax:
			db.<collection-name>.find({<key>:{$lte:<value>}})
		Example:
			> db.students_details.find({"age":{$lte:23}}).pretty()
			{
					"_id" : ObjectId("62ce418555662010806af62c"),
					"name" : "arun",
					"age" : 23,
					"marks" : 99.94
			}
	5)Greaterthan or equal:
		Stntax:
			db.<collection-name>.find({<key>:{$gte:<value>}})
		Example:
			> db.students_details.find({"age":{$gte:23}}).pretty()
				{
						"_id" : ObjectId("62ce418555662010806af62c"),
						"name" : "arun",
						"age" : 23,
						"marks" : 99.94
				}
				{
						"_id" : ObjectId("62ce41d755662010806af62d"),
						"name" : "sai teja",
						"age" : 24,
						"marks" : 89
				}
	6) values in array:
		Stntax:
			db.<collection-name>.find({"key":{$in:[<value1>,<value2>,<value3>..............<valuen>]}})
		Example:
			> db.students_details.find({"age":{$in:[21,22,23]}}).pretty()
				{
						"_id" : ObjectId("62ce418555662010806af62c"),
						"name" : "arun",
						"age" : 23,
						"marks" : 99.94
				}
	7) values not in array
		Stntax:
			db.<collection-name>.find({"key":{$nin:[<value1>,<value2>,<value3>..............<valuen>]}})
		Example:
			> db.students_details.find({"age":{$nin:[21,22,23]}}).pretty()
				{
						"_id" : ObjectId("62ce41d755662010806af62d"),
						"name" : "sai teja",
						"age" : 24,
						"marks" : 89
				}
				{
						"_id" : ObjectId("62ce41d755662010806af62e"),
						"name" : "harish s",
						"age" : 24,
						"marks" : 98.99
				}
Logical operators in mongo db:
	1) And
		syntax:
			db.<collection-name>.find({ $and: [ {<key1>:<value1>}, { <key2>:<value2>} ] })
		Example:
			> db.students_details.find({$and:[{"name":"arun","age":23}]})
			{ "_id" : ObjectId("62ce418555662010806af62c"), "name" : "arun", "age" : 23, "marks" : 99.94 }
	2) Or:
		Stntax:
			>db.mycol.find({$or: [{key1: value1}, {key2:value2}]}).pretty()
	USING AND OR TOGETHER:
		syntax:
			db.<collection-name>.find({<key>:<value>,$or:[{<key>:<value>},{<key>:<value>}]})
		Example:
			> db.students_details.find({"name":"arun",$or:[{"age":23},{"village":"mandamarri"}]}).pretty()
	3) not:
		syntax:
			db.<collection-name>.find({<key>:{$not:{<operators>:<value>}}})     ### here operators is nothing bit gt,lt,gte,lte,eq
		Example:
			> db.students_details.find({"age":{$not:{$gt:23}}})
			{ "_id" : ObjectId("62ce418555662010806af62c"), "name" : "arun", "age" : 23, "marks" : 99.94 }
Update the document in collecion in Mongo db:
	=> we can use update() and save() methods to update the document in collection
	Stntax:
		db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA)
		db.students_details
	Example:
		> db.students_details.update({"name":"arun"},{$set:{"age":22}});
		WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
	Save():
		==> The save method replaces the existing document with new document passed in save() method
	findOneAndUpdate():
		==> it will update the existing document
		Stntax:
			db.<collection-name>.findOneAndUpdate({<existing-key>:<existing-vale>},{$set:{<new-key>:<new-value>}})
		Example:
			> db.students_details.findOneAndUpdate({"age":24},{$set:{"age":25}});
			{
					"_id" : ObjectId("62ce41d755662010806af62d"),
					"name" : "sai teja",
					"age" : 24,
					"marks" : 89
			}
			> db.students_details.find()
			{ "_id" : ObjectId("62ce418555662010806af62c"), "name" : "arun", "age" : 22, "marks" : 99.94 }
			{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 25, "marks" : 89 }
			{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 24, "marks" : 98.99 }
	updateOne():
		==> This method update only one record
		Stntax:
			db.<collection-name>.updateOne({<key>:<value>},{$set:{<new-key>:<new-value>}})
		Example:
			> db.students_details.updateOne({"age":24},{$set:{"age":25}});
			{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
			> db.students_details.find();
			{ "_id" : ObjectId("62ce418555662010806af62c"), "name" : "arun", "age" : 22, "marks" : 99.94 }
			{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 25, "marks" : 89 }
			{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 25, "marks" : 98.99 }
			{ "_id" : ObjectId("62cfb79b55662010806af62f"), "name" : "kalyan", "age" : 24, "marks" : 99.95 }
	Updatemany():
		Stntax:
			db.<collection-name>.updateMany({"Key":{<operators>:<value>},{$set:{<new-key>:<new-value>}}})   ### operators nothig but eq,gt,gte,lte
		Example:
			> db.students_details.updateMany({age:{$gt:22}},{$set:{age:24}});
				{ "acknowledged" : true, "matchedCount" : 3, "modifiedCount" : 1 }
				> db.students_details.find();
				{ "_id" : ObjectId("62ce418555662010806af62c"), "name" : "arun", "age" : 22, "marks" : 99.94 }
				{ "_id" : ObjectId("62ce41d755662010806af62d"), "name" : "sai teja", "age" : 24, "marks" : 89 }
				{ "_id" : ObjectId("62ce41d755662010806af62e"), "name" : "harish s", "age" : 24, "marks" : 98.99 }
				{ "_id" : ObjectId("62cfb79b55662010806af62f"), "name" : "kalyan", "age" : 24, "marks" : 99.95 }
Deleting document from collecion:
	Stntax:
		db.<collection-name>.remove(<deletion criteria>)
	Example:
		> db.students_details.remove({"age":25})
			WriteResult({ "nRemoved" : 3 })